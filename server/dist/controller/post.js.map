{"version":3,"sources":["../../src/controller/post.js"],"names":["arr","list","i","length","findOne","id","userId","user","obj","avatar","push","changeList","postingFunc","req","res","headers","userid","type","update","_id","value","multi","create","title","body","spot","city","time","content","urls","rate","tagList","starList","commentList","$inc","postNum","send","code","message","data","sort","result","b","a","console","log","postFunc","pageConfig","num","query","page","start","end","sortString","find","status","skip","limit","list_a","slice","isStared","indexOf","j","userStar","h","comment","url","name","username","userInfo","desc","postTime","formatCSTDate","starFunc","postId","starIndex","statusText","err","docs","splice","filter","item","newstarlist","pinglunFunc","Date","starNum","post","concat","newComment","myPostedFunc","changeMinePostStatusFunc","statusObj","hide","text","show","delete"],"mappings":"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","file":"post.js","sourcesContent":["\r\nimport Post from '../model/post.js';\r\nimport Id from '../model/id.js';\r\nimport User from '../model/user.js';\r\nimport Star from '../model/star.js';\r\nimport Comment from '../model/comment.js';\r\nimport util from '../lib/formDate.js';\r\n\r\n\r\nexport const postingFunc = async (req, res) => {\r\n  let userId = req.headers.userid;\r\n  let obj = await Id.findOne({type: 'postId'});\r\n  if (obj) await Id.update({_id: obj._id}, {value: obj.value + 1}, {multi: false}, () => {});\r\n  else await Id.create({type: 'postId'});\r\n  obj = await Id.findOne({type: 'postId'});\r\n  try {\r\n    await Post.create({\r\n      title: req.body.title,\r\n      spot: req.body.spot,\r\n      city: req.body.city,\r\n      time: req.body.time,\r\n      content: req.body.content,\r\n      urls: req.body.urls,\r\n      rate: req.body.rate,\r\n      tagList: req.body.tagList,\r\n      starList: [],\r\n      commentList: [],\r\n      userId: req.headers.userid,\r\n      id: obj.value + 1\r\n    });\r\n    await User.update({id: userId}, {$inc: {postNum: 1}}, {multi: false}, () => {});\r\n    res.send({code: 200, message: '分享成功', data: {}});\r\n  } catch (err) {\r\n    res.send({code: 300, message: '分享失败', data: err});\r\n  }\r\n\r\n};\r\n\r\nfunction sort (type, list) {\r\n  let result;\r\n  if (type === 'newest') {\r\n    result = list;\r\n  } else if (type === 'hotest') {\r\n    result = list.sort((b, a) => {\r\n      return a.starList.length - b.starList.length;\r\n    });\r\n  } else if (type === 'mostest') {\r\n    result = list.sort((b, a) => {\r\n      return a.commentList.length - b.commentList.length;\r\n    });\r\n  } else console.log('出错了，请检查');\r\n  return result;\r\n}\r\n\r\nasync function changeList (arr) {\r\n  let list = [];\r\n  for (let i = 0; i < arr.length; i++) {\r\n    let user = await User.findOne({id: arr[i].userId});\r\n    let obj = {...arr[i], avatar: user.avatar};\r\n    list.push(obj);\r\n  }\r\n  return list;\r\n}\r\n\r\nexport const postFunc = async (req, res) => {\r\n  let userId = req.headers.userid - 0;\r\n  let pageConfig = {\r\n    num: req.query.num - 0, // 每页数量\r\n    page: req.query.page - 0 // 当前页数\r\n  };\r\n  let start = pageConfig.page * pageConfig.num;\r\n  let end = start + pageConfig.num;\r\n  console.log(pageConfig);\r\n  let type = req.query.type ? req.query.type : 'newest';\r\n  let sortString = 0;\r\n  // let arr = await Post.find({status: 0}).sort({postTime: -1});\r\n  let arr = [];\r\n  if (type === 'newest') {\r\n    arr = await Post.find({status: 0})\r\n    .skip(start)\r\n    .limit(pageConfig.num)\r\n    .sort({'_id': -1});\r\n  } else {\r\n    let list_a = await Post.find({});\r\n    if (type === 'mostest') {\r\n      list_a = list_a.sort((b, a) => (a.commentList.length - b.commentList.length));\r\n      arr = list_a.slice(start, end);\r\n    } else if (type === 'hotest') {\r\n      list_a = list_a.sort((b, a) => (a.starList.length - b.starList.length));\r\n      arr = list_a.slice(start, end);\r\n    }\r\n  }\r\n\r\n  let list = [];\r\n  for (let i = 0; i < arr.length; i++) {\r\n    let user = await User.findOne({id: arr[i].userId});\r\n    let isStared = (arr[i].starList.indexOf(userId) === -1 ? false : true);\r\n    let starList = [];\r\n    for (let j = 0; j < arr[i].starList.length; j++) {\r\n      let userStar = await User.findOne({id: arr[i].starList[j] - 0});\r\n      starList.push(userStar);\r\n    }\r\n    let commentList = [];\r\n    for (let h = 0; h < arr[i].commentList.length; h++) {\r\n      let user = await User.findOne({id: arr[i].commentList[h].userId});\r\n\r\n      commentList.push({\r\n        comment: arr[i].commentList[h].comment,\r\n        user: {\r\n          url: user.avatar,\r\n          name: user.username\r\n        }\r\n      });\r\n    }\r\n    let obj = {\r\n      id: arr[i].id,\r\n      userId: arr[i].userId - 0,\r\n      userInfo: {\r\n        username: user.username,\r\n        desc: user.desc,\r\n        avatar: user.avatar\r\n      },\r\n      postTime: util.formatCSTDate(arr[i].postTime),\r\n      commentList,\r\n      starList,\r\n      tagList: arr[i].tagList,\r\n      rate: arr[i].rate,\r\n      urls: arr[i].urls,\r\n      content: arr[i].content,\r\n      time: arr[i].time,\r\n      city: arr[i].city,\r\n      spot: arr[i].spot,\r\n      title: arr[i].title,\r\n      avatar: user.avatar,\r\n      isStared\r\n    };\r\n    list.push(obj);\r\n  }\r\n  res.send({code: 200, message: '获取数据成功', data: {list}});\r\n};\r\n\r\n\r\n\r\nexport const starFunc = async (req, res) => {\r\n  let userId = req.headers.userid - 0;\r\n  let postId = req.body.id - 0;\r\n\r\n  let {starList} = await Post.findOne({id: postId});\r\n  starList = [...starList];\r\n\r\n  let starIndex = starList.indexOf(userId);\r\n  let status = null;\r\n  let statusText = null;\r\n  if (starIndex === -1) {\r\n    starList.push(userId);\r\n    status = 'star';\r\n    statusText = '喜欢成功';\r\n    let {list} = await Star.findOne({id: userId});\r\n    list = [...list, postId];\r\n    await Star.update({id: userId}, {list}, {multi: false}, (err, docs) => {\r\n      if (err) console.log('喜欢分享出错了', err);\r\n    });\r\n  } else {\r\n    starList.splice(starIndex, 1);\r\n    status = 'unstar';\r\n    statusText = '取消喜欢成功';\r\n    let {list} = await Star.findOne({id: userId});\r\n    list = list.filter(item => (item - 0 !== postId));\r\n\r\n    await Star.update({id: userId}, {list}, {multi: false}, (err, docs) => {\r\n      if (err) console.log('喜欢分享出错了', err);\r\n    });\r\n  }\r\n  try {\r\n    await Post.update({id: req.body.id}, {starList}, {multi: false}, () => {});\r\n    let newstarlist = [];\r\n    for (let i = 0; i < starList.length; i++) {\r\n      let user = await User.findOne({id: starList[i] - 0});\r\n      newstarlist.push({\r\n        avatar: user.avatar\r\n      });\r\n    }\r\n    res.send({code: 200, message: statusText, data: {\r\n      status,\r\n      list: newstarlist\r\n    }});\r\n  } catch (err) {\r\n    res.send({code: 300, message: '操作失败', data: err});\r\n  }\r\n\r\n};\r\n\r\n\r\nexport const pinglunFunc = async (req, res) => {\r\n  let userId = req.headers.userid - 0;\r\n  let postId = req.body.id - 0;\r\n  let value = req.body.value;\r\n\r\n  let comment = {\r\n    comment: {\r\n      time: new Date(),\r\n      starNum: 0,\r\n      content: value\r\n    },\r\n    userId: userId\r\n  };\r\n\r\n  let post = await Post.findOne({id: postId});\r\n  let commentList = post.commentList.concat([]);\r\n  commentList.push(comment);\r\n\r\n  let user = await User.findOne({id: userId});\r\n  let newComment = {\r\n    comment: {\r\n      content: value\r\n    },\r\n    user: {\r\n      url: user.avatar,\r\n      name: user.username\r\n    },\r\n    userInfo: {\r\n      avatar: user.avatar,\r\n      username: user.username\r\n    }\r\n  };\r\n\r\n  let {list} = await Comment.findOne({id: userId});\r\n  if (list.indexOf(postId) === -1) {\r\n    list = [...list, postId];\r\n    await Comment.update({id: userId}, {list}, {multi: false}, () => {});\r\n  }\r\n  try {\r\n    await Post.update({id: postId}, {commentList}, {multi: false}, () => {});\r\n    await Comment.update({id: userId}, {commentList}, {multi: false}, () => {});\r\n    res.send({code: 200, message: '评论成功', data: newComment});\r\n  } catch (err) {\r\n    res.send({code: 300, message: '评论失败，请联系管理员', data: err});\r\n  }\r\n\r\n};\r\nexport const myPostedFunc = async (req, res) => {\r\n  let userId = req.headers.userid - 0;\r\n  let pageConfig = {\r\n    num: req.body.num - 0, // 每页数量\r\n    page: req.body.page - 0 // 当前页数\r\n  };\r\n  let start = pageConfig.page * pageConfig.num;\r\n  let end = start + pageConfig.num;\r\n  let list = [];\r\n\r\n  try {\r\n\r\n    let arr = await Post.find({userId});\r\n    arr = arr.slice(start, end);\r\n    for (let i = 0; i < arr.length; i++) {\r\n      if (arr[i].status === 2) continue; // 逻辑删除的不做显示\r\n      let user = await User.findOne({id: arr[i].userId});\r\n      let isStared = (arr[i].starList.indexOf(userId) === -1 ? false : true);\r\n      let starList = [];\r\n      for (let j = 0; j < arr[i].starList.length; j++) {\r\n        let user = await User.findOne({id: arr[i].starList[j] - 0});\r\n        starList.push(user);\r\n      }\r\n      let commentList = [];\r\n      for (let h = 0; h < arr[i].commentList.length; h++) {\r\n        let user = await User.findOne({id: arr[i].commentList[h].userId});\r\n\r\n        commentList.push({\r\n          comment: arr[i].commentList[h].comment,\r\n          user: {\r\n            url: user.avatar,\r\n            name: user.username\r\n          }\r\n        });\r\n      }\r\n      let obj = {\r\n        id: arr[i].id,\r\n        userId: arr[i].userId - 0,\r\n        postTime: util.formatCSTDate(arr[i].postTime),\r\n        commentList,\r\n        starList,\r\n        tagList: arr[i].tagList,\r\n        rate: arr[i].rate,\r\n        urls: arr[i].urls,\r\n        content: arr[i].content,\r\n        time: arr[i].time,\r\n        city: arr[i].city,\r\n        spot: arr[i].spot,\r\n        title: arr[i].title,\r\n        avatar: user.avatar,\r\n        isStared,\r\n        status: arr[i].status\r\n      };\r\n      list.push(obj);\r\n    }\r\n    res.send({code: 200, message: '获取我的分享成功', data: {list}});\r\n  } catch (err) {\r\n    res.send({code: 300, message: '获取我的分享失败，请联系管理员', data: err});\r\n  }\r\n};\r\n\r\nexport const changeMinePostStatusFunc = async (req, res) => {\r\n  let postId = req.body.id - 0;\r\n  let status = req.body.status;\r\n  let list = [];\r\n  let statusObj = {\r\n    hide: {num: 1, text: '隐藏'},\r\n    show: {num: 0, text: '显示'},\r\n    delete: {num: 2, text: '删除'}\r\n  };\r\n  status = statusObj[status];\r\n  try {\r\n    await Post.update({id: postId}, {status: status.num}, {multi: false}, () => {});\r\n\r\n    res.send({code: 200, message: status.text + '我的分享成功', data: {}});\r\n  } catch (err) {\r\n    res.send({code: 300, message: status.text + '我的分享失败，请联系管理员', data: err});\r\n  }\r\n\r\n};\r\n"]}